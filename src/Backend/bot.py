import asyncio
import locale
import random
import string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, LabeledPrice, ContentType
from config import BOT_TOKEN
from mydb import Database
from calendar import month_name
from datetime import datetime, timedelta

# –°—Ç–∞–≤–∏–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –¥–∞—Ç
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    pass  # –°–µ—Ä–≤–µ—Ä –±–µ–∑ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
db = Database()

def t(key, lang="ru", **kwargs):
    texts = {
        "start_ru": "üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        "start_en": "üëã Hello, {name}!\nChoose an action from the menu below:",
        "choose_lang_ru": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_lang_en": "üåê Choose your language:",
        "lang_saved_ru": "‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "lang_saved_en": "‚úÖ Language saved.",
        "settings_ru": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "settings_en": "üåê Choose your language:",
        "profile_ru": (
            "<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "üåê –Ø–∑—ã–∫: {language}\n"
            "üõ°Ô∏è –ê–¥–º–∏–Ω: {is_admin}\n"
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
        ),
        "profile_en": (
            "<b>Your profile:</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "üåê Language: {language}\n"
            "üõ°Ô∏è Admin: {is_admin}\n"
            "üí≥ Subscription: {sub_status}"
        ),
        "profile_not_found_ru": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "profile_not_found_en": "‚ùå Profile not found.",
        "admin_only_ru": "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.",
        "admin_only_en": "‚õî Only admin can grant access.",
        "grant_usage_ru": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grantaccess user_id –∫–æ–ª-–≤–æ d|h\n–ü—Ä–∏–º–µ—Ä: /grantaccess 123456789 3d –∏–ª–∏ /grantaccess 123456789 12h",
        "grant_usage_en": "Usage: /grantaccess user_id amount d|h\nExample: /grantaccess 123456789 3d or /grantaccess 123456789 12h",
        "grant_success_ru": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {value} {unit}.",
        "grant_success_en": "‚úÖ User {target_id} granted access for {value} {unit}.",
        "grant_format_ru": "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 3d (–¥–Ω–∏) –∏–ª–∏ 12h (—á–∞—Å—ã).",
        "grant_format_en": "Specify period as 3d (days) or 12h (hours).",
        "grant_error_ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
        "grant_error_en": "‚ö†Ô∏è Error: {e}",
        "site_link_ru": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç:",
        "site_link_en": "Click the button below to open the site:",
        "no_sub_ru": "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏ –µ—ë —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
        "no_sub_en": "You have no active subscription. Buy it via üí≥ Buy subscription.",
        "choose_period_ru": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
        "choose_period_en": "Choose subscription period:",
        "thanks_ru": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.",
        "thanks_en": "Thank you for your purchase! Your subscription is active for {days} days.",
        "instruction_ru": (
            "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
            " üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É.\n"
            " üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n"
            " üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
            " üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø.\n"
            " /ref ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∫–æ–¥.\n"
            " /activate_ref ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 10 –±–∞–ª–ª–æ–≤.\n"
            "{one_time_block}"
            "{admin_block}"
            "\n‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ '@Ur TG Name     '!"
        ),
        "instruction_en": (
            "üìå <b>How to use the bot:</b>\n\n"
            " üîó Get access ‚Äî get access to the site.\n"
            " üí≥ Buy subscription ‚Äî get a subscription.\n"
            " üë§ Profile ‚Äî see ur profile.\n"
            " üéÅ Referral system - share the code and get access.\n"
            " /ref ‚Äî check your code.\n"
            " /activate_ref ‚Äî activate subscription for 10 points.\n"
            "{one_time_block}"
            "{admin_block}"
            "\n‚ùì If you have questions, write '@Ur TG Name     '!"
        ),
        "one_time_block_ru": " /free ‚Äî –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç.\n",
        "one_time_block_en": " /free ‚Äî one-time access for 5 minutes.\n",
        "admin_block_ru": (" üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Äî –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.\n"),
        "admin_block_en": (" üõ°Ô∏è Admin panel ‚Äî refund payments.\n"),
        "ref_code_ru": (
            "üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{ref_code}</code>\n"
            "üë• –ë–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <b>{points}</b>\n\n"
            "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –ø—É—Å—Ç—å –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤–∞—à –∫–æ–¥ —á–µ—Ä–µ–∑ <b>/activate_ref &lt;–∫–æ–¥&gt;</b>.\n"
            "–ó–∞ –∫–∞–∂–¥—ã–µ 10 –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏."
        ),
        "ref_code_en": (
            "üîó Your referral code: <code>{ref_code}</code>\n"
            "üë• Referral points: <b>{points}</b>\n\n"
            "Invite friends ‚Äî let them activate your code via <b>/activate_ref &lt;code&gt;</b>.\n"
            "For every 10 points you can get 1 day of subscription."
        ),
        "ref_usage_ru": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_ref &lt;—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt;",
        "ref_usage_en": "Usage: /activate_ref &lt;referral_code&gt;",
        "ref_already_used_ru": "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.",
        "ref_already_used_en": "You have already activated someone's referral code.",
        "ref_own_ru": "–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥.",
        "ref_own_en": "You can't activate your own code.",
        "ref_not_found_ru": "–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        "ref_not_found_en": "No such code exists.",
        "ref_activated_ru": "‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç 1 –±–∞–ª–ª.",
        "ref_activated_en": "‚úÖ Code activated! User will get 1 point.",
        "not_enough_points_ru": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!",
        "not_enough_points_en": "Not enough points!",
        "sub_activated_ru": "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ 10 –±–∞–ª–ª–æ–≤!",
        "sub_activated_en": "üéâ 1 day subscription activated for 10 points!",
        "one_time_used_ru": "‚õî –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.",
        "one_time_used_en": "‚õî You have already used 5-minute access. Can't use again.",
        "one_time_success_ru": "‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£—Å–ø–µ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º!",
        "one_time_success_en": "‚úÖ 5-minute access activated. Hurry up and use the site!",
        "admin_panel_ru": (
            " üõ°Ô∏è <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            " üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç\n"
            " /broadcast ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            " /grantaccess user_id —Å—Ä–æ–∫ ‚Äî –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            " /remove_sub user_id ‚Äî –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            " /giveadmin user_id ‚Äî –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É\n"
            " /remove_admin user_id ‚Äî –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É\n"
            " /users ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        ),
        "admin_panel_en": (
            " üõ°Ô∏è <b>Admin panel</b>\n\n"
            " üí∏ Refund ‚Äî process a refund\n"
            " /broadcast ‚Äî send a message to all users\n"
            " /grantaccess user_id period ‚Äî grant a subscription\n"
            " /remove_sub user_id ‚Äî remove a subscription\n"
            " /giveadmin user_id ‚Äî grant admin rights\n"
            " /remove_admin user_id ‚Äî remove admin rights\n"
            " /users ‚Äî statistics\n"
        ),
        "users_stats_ru": "üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>",
        "users_stats_en": "üë• Total registered users: <b>{total}</b>",
        "active_subs_ru": "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{active}</b>",
        "active_subs_en": "üìä Active subscriptions: <b>{active}</b>",
        "refund_admin_only_ru": "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã.",
        "refund_admin_only_en": "‚õî Only admins can make refunds.",
        "refund_enter_id_ru": "–í–≤–µ–¥–∏—Ç–µ <b>telegram_payment_charge_id</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:",
        "refund_enter_id_en": "Enter <b>telegram_payment_charge_id</b> for refund:",
        "refund_not_found_ru": "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "refund_not_found_en": "‚ùå Payment not found.",
        "refund_success_ru": "‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
        "refund_success_en": "‚úÖ Refund completed.",
        "refund_error_ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}",
        "refund_error_en": "‚ö†Ô∏è Refund error: {e}",
    }
    return texts.get(f"{key}_{lang}", texts.get(f"{key}_ru", "")).format(**kwargs)

async def get_menu_keyboard(user_id: int):
    user = await db.get_user(user_id)
    is_admin = user and user.get('is_admin', False)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    buttons = [
        [KeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø" if lang == "ru" else "üîó Get access")],
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" if lang == "ru" else "üí≥ Buy subscription"),
         KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å" if lang == "ru" else "üë§ Profile")],
        [KeyboardButton(text="üéì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" if lang == "ru" else "üéì Instruction"),
         KeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" if lang == "ru" else "üéÅ Referral system")],
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" if lang == "ru" else "üõ°Ô∏è Admin panel")])
    menu_kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return menu_kb

class LanguageState(StatesGroup):
    choosing = State()

class CaptchaState(StatesGroup):
    waiting = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    if not user:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞–ø—á—É (–ø—Ä–∏–º–µ—Ä: —Å—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª)
        a, b = random.randint(1, 9), random.randint(1, 9)
        answer = a + b
        await state.update_data(captcha_answer=answer)
        await message.answer(f"ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} + {b}?")
        await state.set_state(CaptchaState.waiting)
        lang = "ru"
        return

    menu_kb = await get_menu_keyboard(user_id)

    if not user.get("is_initialized"):
        lang_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
            [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:en")]
        ])
        await message.answer(t("choose_lang", lang=lang), reply_markup=lang_kb)
        await state.set_state(LanguageState.choosing)
    else:
        await message.answer(
            t("start", lang=lang, name=message.from_user.full_name), reply_markup=menu_kb
        )

@dp.message(CaptchaState.waiting)
async def captcha_check(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct = str(data.get("captcha_answer"))
    if message.text.strip() == correct:
        await db.create_user(message.from_user.id)
        await state.clear()
        lang_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
            [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:en")]
        ])
        await message.answer("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n\nüåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nüåê Choose your language:", reply_markup=lang_kb)
        await state.set_state(LanguageState.choosing)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@dp.message(lambda m: m.text in ["üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üõ°Ô∏è Admin panel"])
async def admin_panel(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞." if lang == "ru" else "‚õî No access.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤" if lang == "ru" else "üí∏ Refund", callback_data="admin:refund")]
    ])
    await message.answer(t("admin_panel", lang=lang), reply_markup=kb, parse_mode="HTML")


@dp.message(Command("giveadmin"))
async def give_admin(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞." if lang == "ru" else "‚õî Only admin can grant rights.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /giveadmin {user_id}" if lang == "ru" else "Usage: /giveadmin {user_id}")
        return

    try:
        target_id = int(parts[1])
        await db.set_admin(target_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä." if lang == "ru" else f"‚úÖ User {target_id} is now admin.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}" if lang == "ru" else f"‚ö†Ô∏è Error: {e}")


@dp.message(Command("remove_admin"))
async def remove_admin(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞." if lang == "ru" else "‚õî No access.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin user_id" if lang == "ru" else "Usage: /remove_admin user_id")
        return
    try:
        target_id = int(parts[1])
        await db.remove_admin(target_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–¥–∞–ª–µ–Ω–∞." if lang == "ru" else f"‚úÖ Admin rights for user {target_id} removed.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}" if lang == "ru" else f"Error: {e}")


@dp.message(lambda m: m.text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üë§ Profile"])
async def profile(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user_profile(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    if not user:
        await message.answer(t("profile_not_found", lang=lang))
        return

    is_admin = ("‚úÖ –î–∞" if user.get("is_admin") else "‚ùå –ù–µ—Ç") if lang == "ru" else ("‚úÖ Yes" if user.get("is_admin") else "‚ùå No")
    sub_end = user.get("subscription")
    if sub_end and sub_end > datetime.utcnow():
        if lang == "ru":
            sub_status = f"‚úÖ –î–æ {sub_end.strftime('%d %B %Y')}"
        else:
            month = month_name[sub_end.month]
            sub_status = f"‚úÖ until {sub_end.day} {month} {sub_end.year}"
    else:
        sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏" if lang == "ru" else "‚ùå No subscription"

    language = "–†—É—Å—Å–∫–∏–π" if lang == "ru" else "English"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" if lang == "ru" else "üåê Change language", callback_data="profile:change_lang")]
    ])
    await message.answer(
        t("profile", lang=lang, user_id=user_id, language=language, is_admin=is_admin, sub_status=sub_status),
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data == "profile:change_lang")
async def profile_change_lang(callback: types.CallbackQuery):
    lang_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:en")]
    ])
    await callback.message.edit_reply_markup(reply_markup=lang_kb)
    await callback.answer()


@dp.message(Command("grantaccess"))
async def grant_access(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer(t("admin_only", lang=lang))
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer(t("grant_usage", lang=lang))
        return

    try:
        target_id = int(parts[1])
        period = parts[2].lower()
        if period.endswith('d'):
            value = int(period[:-1])
            delta = timedelta(days=value)
            unit = "–¥–Ω–µ–π" if lang == "ru" else "days"
        elif period.endswith('h'):
            value = int(period[:-1])
            delta = timedelta(hours=value)
            unit = "—á–∞—Å–æ–≤" if lang == "ru" else "hours"
        else:
            await message.answer(t("grant_format", lang=lang))
            return

        now = datetime.utcnow()
        await db.grant_access(target_id, delta, now)
        await message.answer(t("grant_success", lang=lang, target_id=target_id, value=value, unit=unit))
    except Exception as e:
        await message.answer(t("grant_error", lang=lang, e=e))


@dp.message(Command("remove_sub"))
async def remove_subscription(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞." if lang == "ru" else "‚õî No access.")
        return
    
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_sub user_id" if lang == "ru" else "Usage: /remove_sub user_id")
        return
    try:
        target_id = int(parts[1])
        await db.remove_subscription(target_id)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–¥–∞–ª–µ–Ω–∞." if lang == "ru" else f"‚úÖ Subscription for user {target_id} removed.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}" if lang == "ru" else f"Error: {e}")


@dp.message(lambda m: m.text in ["üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "üîó Get access"])
async def send_site_link(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    sub_end = await db.get_subscription(user_id)
    if sub_end and sub_end > datetime.utcnow():
        web_app_url = "https://check-bot.top"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç" if lang == "ru" else "üåê Open site", web_app=types.WebAppInfo(url=web_app_url))]
        ])
        await message.answer(t("site_link", lang=lang), reply_markup=kb)
    else:
        await message.answer(t("no_sub", lang=lang))


@dp.message(lambda m: m.text in ["üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üí≥ Buy subscription"])
async def buy_subscription(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠êÔ∏è –ó–≤–µ–∑–¥—ã", callback_data="pay:stars")],
        [InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–∞", callback_data="pay:crypto")],
        [InlineKeyboardButton(text="–°–ë–ü", callback_data="pay:sbp")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" if lang == "ru" else "Choose payment method:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "pay:stars")
async def pay_stars(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è = 350 ‚≠êÔ∏è" if lang == "ru" else "1 week = 350 ‚≠êÔ∏è", callback_data="sub_7")],
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏ = 500 ‚≠êÔ∏è" if lang == "ru" else "2 weeks = 500 ‚≠êÔ∏è", callback_data="sub_14")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü = 1000 ‚≠êÔ∏è" if lang == "ru" else "1 month = 1000 ‚≠êÔ∏è", callback_data="sub_30")],
        [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ = 2500 ‚≠êÔ∏è" if lang == "ru" else "3 month = 2500 ‚≠êÔ∏è", callback_data="sub_90")],
        [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ = 4500 ‚≠êÔ∏è" if lang == "ru" else "6 month = 4500 ‚≠êÔ∏è", callback_data="sub_180")],
        [InlineKeyboardButton(text="1 –≥–æ–¥ = 8000 ‚≠êÔ∏è" if lang == "ru" else "1 year = 8000 ‚≠êÔ∏è", callback_data="sub_365")]
    ])
    await callback.message.answer(t("choose_period", lang=lang), reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "pay:crypto")
async def pay_crypto(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ." if callback.from_user.language_code == "ru" else "Crypto payment is under development.")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "pay:sbp")
async def pay_sbp(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ." if callback.from_user.language_code == "ru" else "SBP payment is under development.")
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith('sub_'))
async def process_subscription_choice(callback_query: types.CallbackQuery):
    days = int(callback_query.data.split('_')[1])
    price = {
        7: 350,
        14: 500,
        30: 1000,
        90: 2500,
        180: 4500,
        365: 8000
    }[days]
    user = await db.get_user(callback_query.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    prices = [LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Subscription for {days} days", amount=price)]

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Subscription for {days} days",
        description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Payment for {days} days subscription",
        payload=f"subscription_{days}_{callback_query.from_user.id}",
        provider_token="",  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
        currency="XTR",
        prices=prices,
        start_parameter="subscription"
    )
    await callback_query.answer()

@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    if message.content_type == ContentType.SUCCESSFUL_PAYMENT:
        payment = message.successful_payment
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        lang = user["language_code"] if user and user.get("language_code") else "ru"

        payload = payment.invoice_payload
        days = 30
        if payload.startswith("subscription_"):
            try:
                days = int(payload.split("_")[1])
            except Exception:
                days = 30

        now = datetime.utcnow()
        await db.grant_access(user_id, timedelta(days=days), now)

        await db.record_payment(
            user_id=user_id,
            telegram_payment_charge_id=payment.telegram_payment_charge_id,
            provider_payment_charge_id=payment.provider_payment_charge_id,
            amount=payment.total_amount
        )
        await message.answer(t("thanks", lang=lang, days=days))


@dp.message(lambda m: m.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ" and m.from_user.id == 6660631433)
async def fake_buy_subscription(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è (—Ç–µ—Å—Ç)", callback_data="fake_sub_7")],
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏ (—Ç–µ—Å—Ç)", callback_data="fake_sub_14")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü (—Ç–µ—Å—Ç)", callback_data="fake_sub_30")],
    ])
    await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞):", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith('fake_sub_'))
async def process_fake_subscription(callback_query: types.CallbackQuery):
    days = int(callback_query.data.split('_')[2])
    now = datetime.utcnow()
    await db.grant_access(callback_query.from_user.id, timedelta(days=days), now)
    await callback_query.answer()
    await callback_query.message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ (–±–µ–∑ –æ–ø–ª–∞—Ç—ã).")


@dp.message(lambda m: m.text in ["üéì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üéì Instruction"])
async def instruction(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    is_admin = user and user.get('is_admin', False)

    one_time_block = t("one_time_block", lang=lang) if user and not user.get('used_one_time_access') else ""
    admin_block = t("admin_block", lang=lang) if is_admin else ""

    await message.answer(
        t("instruction", lang=lang, one_time_block=one_time_block, admin_block=admin_block),
        parse_mode="HTML"
    )


@dp.message(Command("users"))
async def users_stats(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    if not user or not user.get('is_admin'):
        await message.answer(t("admin_only", lang=lang))
        return

    total_users = await db.get_user_count()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫" if lang == "ru" else "üìä Active subscriptions", callback_data="stats:subs")]
    ])

    await message.answer(t("users_stats", lang=lang, total=total_users), reply_markup=kb)

@dp.callback_query(lambda c: c.data == "stats:subs")
async def show_active_subs(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    active_subs = await db.get_active_subscription_count()
    await callback.message.answer(t("active_subs", lang=lang, active=active_subs))
    await callback.answer()


class RefundState(StatesGroup):
    waiting_for_payment_id = State()

@dp.callback_query(lambda c: c.data == "admin:refund")
async def admin_refund_callback(callback: types.CallbackQuery, state: FSMContext):
    await refund_start(callback.message, state)
    await callback.answer()

@dp.message(lambda m: m.text in ["üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "üí∏ Refund"])
async def refund_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    if not user or not user.get('is_admin'):
        await message.answer(t("refund_admin_only", lang=lang))
        return
    await message.answer(t("refund_enter_id", lang=lang))
    await state.set_state(RefundState.waiting_for_payment_id)

@dp.message(RefundState.waiting_for_payment_id)
async def refund_payment(message: types.Message, state: FSMContext):
    charge_id = message.text.strip()
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"

    async with db.pool.acquire() as conn:
        payment = await conn.fetchrow("SELECT * FROM payments WHERE telegram_payment_charge_id = $1", charge_id)

    if not payment:
        await message.answer(t("refund_not_found", lang=lang))
        await state.clear()
        return

    try:
        await bot.refund_star_payment(
            user_id=payment['user_id'],
            telegram_payment_charge_id=charge_id
        )
        await message.answer(t("refund_success", lang=lang))
        await state.clear()
    except Exception as e:
        await message.answer(t("refund_error", lang=lang, e=e))
        await state.clear()


@dp.message(Command("free"))
async def one_time_access(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    has_used = await db.has_used_one_time_access(user_id)

    if has_used:
        await message.answer(t("one_time_used", lang=lang))
        return

    await db.set_one_time_access_used(user_id)
    now = datetime.utcnow()
    free_until = now + timedelta(minutes=5)
    await db.grant_access(user_id, timedelta(minutes=5), now)
    await db.set_free_until(user_id, free_until)
    await message.answer(t("one_time_success", lang=lang))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è free-–¥–æ—Å—Ç—É–ø–∞
    async def remove_free_access():
        await asyncio.sleep(5 * 60 + 10)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        sub_end = await db.get_subscription(user_id)
        if sub_end and sub_end > datetime.utcnow():
            await db.set_free_until(user_id, None)
            return
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await db.remove_subscription(user_id)
        await db.set_free_until(user_id, None)

    asyncio.create_task(remove_free_access())


def generate_ref_code(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choices(chars, k=length))

@dp.message(lambda m: m.text in ["üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "üéÅ Referral system"])
async def referral_system(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start" if lang == "ru" else "Please use /start first")
        return

    ref_code = user.get("ref_code")
    if not ref_code:
        ref_code = generate_ref_code()
        await db.set_ref_code(user_id, ref_code)

    points = user.get("ref_points", 0)
    text = t("ref_code", lang=lang, ref_code=ref_code, points=points)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 10 –±–∞–ª–ª–æ–≤" if lang == "ru" else "Activate subscription for 10 points", callback_data="ref:activate")]
    ])
    await message.answer(text, reply_markup=kb)

@dp.message(Command("activate_ref"))
async def activate_ref(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start" if lang == "ru" else "Please use /start first")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(t("ref_usage", lang=lang))
        return

    ref_code = parts[1]
    if user.get("used_ref_code"):
        await message.answer(t("ref_already_used", lang=lang))
        return
    if ref_code == user.get("ref_code"):
        await message.answer(t("ref_own", lang=lang))
        return

    ref_owner = await db.get_user_by_ref_code(ref_code)
    if not ref_owner:
        await message.answer(t("ref_not_found", lang=lang))
        return

    await db.set_used_ref_code(user_id, ref_code)
    await db.add_ref_point(ref_owner["user_id"])
    await message.answer(t("ref_activated", lang=lang))

@dp.callback_query(lambda c: c.data == "ref:activate")
async def activate_ref_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    points = user.get("ref_points", 0) if user else 0
    if points < 10:
        await callback.answer(t("not_enough_points", lang=lang), show_alert=True)
        return
    now = datetime.utcnow()
    await db.grant_access(user_id, timedelta(days=1), now)
    await db.remove_ref_points(user_id, 10)
    await callback.message.answer(t("sub_activated", lang=lang))
    await callback.answer()


class BroadcastState(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()
    confirm = State()

async def send_broadcast(text, photo_id=None):
    users = await db.get_all_user_ids()
    count = 0
    for user_id in users:
        try:
            if photo_id:
                await bot.send_photo(user_id, photo_id, caption=text)
            else:
                await bot.send_message(user_id, text)
            count += 1
        except Exception:
            pass

@dp.message(Command("broadcast"))
async def start_broadcast(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    if not user or not user.get('is_admin'):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞." if lang == "ru" else "‚õî No access.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:" if lang == "ru" else "Enter the broadcast text:")
    await state.set_state(BroadcastState.waiting_for_text)

@dp.message(BroadcastState.waiting_for_text)
async def broadcast_text(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user and user.get("language_code") else "ru"
    await state.update_data(text=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" if lang == "ru" else "Add photo", callback_data="broadcast:add_photo")],
        [InlineKeyboardButton(text="–ë–µ–∑ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" if lang == "ru" else "Send without photo", callback_data="broadcast:send_no_photo")]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?" if lang == "ru" else "Do you want to add a photo to the broadcast?", reply_markup=kb)
    await state.set_state(BroadcastState.confirm)

@dp.callback_query(lambda c: c.data == "broadcast:add_photo")
async def broadcast_add_photo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastState.waiting_for_photo)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "broadcast:send_no_photo")
async def broadcast_send_no_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    await state.clear()
    await send_broadcast(text)
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@dp.message(BroadcastState.waiting_for_photo, F.photo)
async def broadcast_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    photo = message.photo[-1].file_id
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    await state.clear()
    await send_broadcast(text, photo)


async def remove_expired_subscriptions():
    while True:
        now = datetime.utcnow()
        async with db.pool.acquire() as conn:
            # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö free_until > now (–∏—Ö —É–¥–∞–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä)
            await conn.execute(
                """
                UPDATE users SET subscription = NULL
                WHERE subscription IS NOT NULL
                  AND subscription < $1
                  AND (free_until IS NULL OR free_until < $1)
                """,
                now
            )
        await asyncio.sleep(1 * 60 * 60) # check every hour


async def main():
    await db.connect()
    asyncio.create_task(remove_expired_subscriptions())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())