import asyncio
import locale
import random
import string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, LabeledPrice, ContentType
from aiogram.client.bot import DefaultBotProperties
from config import BOT_TOKEN
from mydb import Database
from datetime import datetime, timedelta

# –°—Ç–∞–≤–∏–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –¥–∞—Ç
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
db = Database()

def t(key, lang="ru", **kwargs):
    texts = {
        "start_ru": "üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        "start_en": "üëã Hello, {name}!\nChoose an action from the menu below:",
        "choose_lang_ru": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_lang_en": "üåê Choose your language:",
        "lang_saved_ru": "‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "lang_saved_en": "‚úÖ Language saved.",
        "settings_ru": "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "settings_en": "üåê Choose your language:",
        "profile_ru": (
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "üåê –Ø–∑—ã–∫: {language}\n"
            "üõ°Ô∏è –ê–¥–º–∏–Ω: {is_admin}\n"
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
        ),
        "profile_en": (
            "üë§ <b>Your profile:</b>\n\n"
            "üÜî ID: <code>{user_id}</code>\n"
            "üåê Language: {language}\n"
            "üõ°Ô∏è Admin: {is_admin}\n"
            "üí≥ Subscription: {sub_status}"
        ),
        "profile_not_found_ru": "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "profile_not_found_en": "‚ùå Profile not found.",
        "admin_only_ru": "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø.",
        "admin_only_en": "‚õî Only admin can grant access.",
        "grant_usage_ru": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grantaccess user_id –∫–æ–ª-–≤–æ d|h\n–ü—Ä–∏–º–µ—Ä: /grantaccess 123456789 3d –∏–ª–∏ /grantaccess 123456789 12h",
        "grant_usage_en": "Usage: /grantaccess user_id amount d|h\nExample: /grantaccess 123456789 3d or /grantaccess 123456789 12h",
        "grant_success_ru": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {value} {unit}.",
        "grant_success_en": "‚úÖ User {target_id} granted access for {value} {unit}.",
        "grant_format_ru": "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 3d (–¥–Ω–∏) –∏–ª–∏ 12h (—á–∞—Å—ã).",
        "grant_format_en": "Specify period as 3d (days) or 12h (hours).",
        "grant_error_ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
        "grant_error_en": "‚ö†Ô∏è Error: {e}",
        "site_link_ru": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç:",
        "site_link_en": "Click the button below to open the site:",
        "no_sub_ru": "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏ –µ—ë —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
        "no_sub_en": "You have no active subscription. Buy it via üí≥ Buy subscription.",
        "choose_period_ru": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
        "choose_period_en": "Choose subscription period:",
        "thanks_ru": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.",
        "thanks_en": "Thank you for your purchase! Your subscription is active for {days} days.",
        "my_sub_active_ru": "‚úÖ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{date}</b>",
        "my_sub_active_en": "‚úÖ Your subscription is active until: <b>{date}</b>",
        "my_sub_none_ru": "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
        "my_sub_none_en": "‚ùå You have no active subscription.",
        "instruction_ru": (
            "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
            " üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n"
            " /ref ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∫–æ–¥.\n"
            " /activate_ref ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 10 –±–∞–ª–ª–æ–≤.\n"
            "{access_block}"
            "{one_time_block}"
            "{admin_block}"
            " ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞.\n"
            "\n‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ '@Ur TG Name     '!"
        ),
        "instruction_en": (
            "üìå <b>How to use the bot:</b>\n\n"
            " üí≥ Buy subscription ‚Äî get a subscription.\n"
            " /ref ‚Äî check your code.\n"
            " /activate_ref ‚Äî activate subscription for 10 points.\n"
            "{access_block}"
            "{one_time_block}"
            "{admin_block}"
            " ‚öôÔ∏è Settings ‚Äî change language.\n"
            "\n‚ùì If you have questions, write '@Ur TG Name     '!"
        ),
        "access_block_ru": " üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É.\n üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n",
        "access_block_en": " üîó Get access ‚Äî get access to the site.\n üìÖ My subscription ‚Äî see subscription end date.\n",
        "one_time_block_ru": " /one-time-access ‚Äî –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç.\n",
        "one_time_block_en": " /one-time-access ‚Äî one-time access for 5 minutes.\n",
        "admin_block_ru": (
            " üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.\n"
            "üõ°Ô∏è /users ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n"
            "üõ°Ô∏è /giveadmin ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "üõ°Ô∏è /grantaccess ‚Äî –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ –≤—Ä–µ–º—è.\n"
        ),
        "admin_block_en": (
            " üí∏ Refund ‚Äî refund payments.\n"
            "üõ°Ô∏è /users ‚Äî users and subscribers count.\n"
            "üõ°Ô∏è /giveadmin ‚Äî grant admin rights.\n"
            "üõ°Ô∏è /grantaccess ‚Äî grant access for time.\n"
        ),
        "ref_code_ru": (
            "üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{ref_code}</code>\n"
            "üë• –ë–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <b>{points}</b>\n\n"
            "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –ø—É—Å—Ç—å –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –≤–∞—à –∫–æ–¥ —á–µ—Ä–µ–∑ <b>/activate_ref &lt;–∫–æ–¥&gt;</b>.\n"
            "–ó–∞ –∫–∞–∂–¥—ã–µ 10 –±–∞–ª–ª–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏."
        ),
        "ref_code_en": (
            "üîó Your referral code: <code>{ref_code}</code>\n"
            "üë• Referral points: <b>{points}</b>\n\n"
            "Invite friends ‚Äî let them activate your code via <b>/activate_ref &lt;code&gt;</b>.\n"
            "For every 10 points you can get 1 day of subscription."
        ),
        "ref_usage_ru": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_ref &lt;—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π_–∫–æ–¥&gt;",
        "ref_usage_en": "Usage: /activate_ref &lt;referral_code&gt;",
        "ref_already_used_ru": "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.",
        "ref_already_used_en": "You have already activated someone's referral code.",
        "ref_own_ru": "–ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥.",
        "ref_own_en": "You can't activate your own code.",
        "ref_not_found_ru": "–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        "ref_not_found_en": "No such code exists.",
        "ref_activated_ru": "‚úÖ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç 1 –±–∞–ª–ª.",
        "ref_activated_en": "‚úÖ Code activated! User will get 1 point.",
        "not_enough_points_ru": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!",
        "not_enough_points_en": "Not enough points!",
        "sub_activated_ru": "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ 10 –±–∞–ª–ª–æ–≤!",
        "sub_activated_en": "üéâ 1 day subscription activated for 10 points!",
        "one_time_used_ru": "‚õî –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è.",
        "one_time_used_en": "‚õî You have already used 5-minute access. Can't use again.",
        "one_time_success_ru": "‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ 5 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –£—Å–ø–µ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º!",
        "one_time_success_en": "‚úÖ 5-minute access activated. Hurry up and use the site!",
        "users_stats_ru": "üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>",
        "users_stats_en": "üë• Total registered users: <b>{total}</b>",
        "active_subs_ru": "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{active}</b>",
        "active_subs_en": "üìä Active subscriptions: <b>{active}</b>",
        "refund_admin_only_ru": "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã.",
        "refund_admin_only_en": "‚õî Only admins can make refunds.",
        "refund_enter_id_ru": "–í–≤–µ–¥–∏—Ç–µ <b>telegram_payment_charge_id</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:",
        "refund_enter_id_en": "Enter <b>telegram_payment_charge_id</b> for refund:",
        "refund_not_found_ru": "‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "refund_not_found_en": "‚ùå Payment not found.",
        "refund_success_ru": "‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
        "refund_success_en": "‚úÖ Refund completed.",
        "refund_error_ru": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}",
        "refund_error_en": "‚ö†Ô∏è Refund error: {e}",
    }
    return texts.get(f"{key}_{lang}", texts.get(f"{key}_ru", "")).format(**kwargs)

async def get_menu_keyboard(user_id: int):
    user = await db.get_user(user_id)
    is_admin = user and user['is_admin']
    subscription = user and user['subscription']
    now = datetime.utcnow()

    lang = user["language_code"] if user else "ru"

    buttons = [
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" if lang == "ru" else "üí≥ Buy subscription")],
        [KeyboardButton(text="üéì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" if lang == "ru" else "üéì Instruction"),
         KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" if lang == "ru" else "‚öôÔ∏è Settings")],
    ]

    if is_admin or (subscription and subscription > now):
        buttons.insert(0, [KeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø" if lang == "ru" else "üîó Get access")])
        buttons.insert(1, [KeyboardButton(text="üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" if lang == "ru" else "üìÖ My subscription")])

    if is_admin:
        buttons.append([KeyboardButton(text="üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤" if lang == "ru" else "üí∏ Refund")])

    menu_kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return menu_kb

class LanguageState(StatesGroup):
    choosing = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    menu_kb = await get_menu_keyboard(message.from_user.id)
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"

    if not user:
        await db.create_user(user_id)
        lang = "ru"

    if not user or not user["is_initialized"]:
        lang_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
            [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:en")]
        ])
        await message.answer(t("choose_lang", lang=lang), reply_markup=lang_kb)
        await state.set_state(LanguageState.choosing)
    else:
        await message.answer(
            t("start", lang=lang, name=message.from_user.full_name), reply_markup=menu_kb
        )

@dp.message(lambda m: m.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"])
async def open_settings(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user else "ru"
    lang_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang:en")]
    ])
    await message.answer(t("settings", lang=lang), reply_markup=lang_kb)

@dp.callback_query(lambda c: c.data.startswith("lang:"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    menu_kb = await get_menu_keyboard(callback.from_user.id)
    lang_code = callback.data.split(":")[1]
    user_id = callback.from_user.id

    await db.set_user_language(user_id, lang_code)
    await db.set_user_initialized(user_id)

    await callback.message.edit_text(t("lang_saved", lang=lang_code))
    await callback.message.answer(t("start", lang=lang_code, name=callback.from_user.full_name), reply_markup=menu_kb)
    await state.clear()


@dp.message(Command("giveadmin"))
async def give_admin(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user else "ru"
    if message.from_user.id != 6660631433:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞." if lang == "ru" else "‚õî Only the main admin can grant rights.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /giveadmin {user_id}" if lang == "ru" else "Usage: /giveadmin {user_id}")
        return

    try:
        target_id = int(parts[1])
        await db.set_admin(target_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä." if lang == "ru" else f"‚úÖ User {target_id} is now admin.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}" if lang == "ru" else f"‚ö†Ô∏è Error: {e}")


@dp.message(Command("profile"))
async def profile(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user_profile(user_id)
    lang = user["language_code"] if user else "ru"

    if not user:
        await message.answer(t("profile_not_found", lang=lang))
        return

    is_admin = "‚úÖ –î–∞" if lang == "ru" else ("‚úÖ Yes" if user["is_admin"] else "‚ùå No")
    sub_end = user["subscription"]
    if sub_end and sub_end > datetime.utcnow():
        sub_status = f"‚úÖ –¥–æ {sub_end.strftime('%d %B %Y')}" if lang == "ru" else f"‚úÖ until {sub_end.strftime('%d %B %Y')}"
    else:
        sub_status = "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏" if lang == "ru" else "‚ùå No subscription"

    language = "–†—É—Å—Å–∫–∏–π" if lang == "ru" else "English"
    await message.answer(
        t("profile", lang=lang, user_id=user_id, language=language, is_admin=is_admin, sub_status=sub_status)
    )


@dp.message(Command("grantaccess"))
async def grant_access(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user else "ru"
    if not user or not user['is_admin']:
        await message.answer(t("admin_only", lang=lang))
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.answer(t("grant_usage", lang=lang))
        return

    try:
        target_id = int(parts[1])
        period = parts[2].lower()
        if period.endswith('d'):
            value = int(period[:-1])
            delta = timedelta(days=value)
            unit = "–¥–Ω–µ–π" if lang == "ru" else "days"
        elif period.endswith('h'):
            value = int(period[:-1])
            delta = timedelta(hours=value)
            unit = "—á–∞—Å–æ–≤" if lang == "ru" else "hours"
        else:
            await message.answer(t("grant_format", lang=lang))
            return

        now = datetime.now()
        await db.grant_access(target_id, delta, now)
        await message.answer(t("grant_success", lang=lang, target_id=target_id, value=value, unit=unit))
    except Exception as e:
        await message.answer(t("grant_error", lang=lang, e=e))


@dp.message(lambda m: m.text in ["üîó –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "üîó Get access"])
async def send_site_link(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    sub_end = await db.get_subscription(user_id)
    if sub_end and sub_end > datetime.utcnow():
        web_app_url = "https://check-bot.top"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç" if lang == "ru" else "üåê Open site", web_app=types.WebAppInfo(url=web_app_url))]
        ])
        await message.answer(t("site_link", lang=lang), reply_markup=kb)
    else:
        await message.answer(t("no_sub", lang=lang))


@dp.message(lambda m: m.text in ["üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üí≥ Buy subscription"])
async def buy_subscription(message: types.Message):
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user else "ru"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è" if lang == "ru" else "1 week", callback_data="sub_7")],
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏" if lang == "ru" else "2 weeks", callback_data="sub_14")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü" if lang == "ru" else "1 month", callback_data="sub_30")],
    ])
    await message.answer(t("choose_period", lang=lang), reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith('sub_'))
async def process_subscription_choice(callback_query: types.CallbackQuery):
    days = int(callback_query.data.split('_')[1])
    price = {
        7: 1,
        14: 2,
        30: 3
    }[days]
    user = await db.get_user(callback_query.from_user.id)
    lang = user["language_code"] if user else "ru"

    prices = [LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Subscription for {days} days", amount=price)]

    await bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Subscription for {days} days",
        description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π" if lang == "ru" else f"Payment for {days} days subscription",
        payload=f"subscription_{days}_{callback_query.from_user.id}",
        provider_token="",  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
        currency="XTR",
        prices=prices,
        start_parameter="subscription"
    )
    await callback_query.answer()

@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    if message.content_type == ContentType.SUCCESSFUL_PAYMENT:
        payment = message.successful_payment
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        lang = user["language_code"] if user else "ru"

        payload = payment.invoice_payload
        days = 30
        if payload.startswith("subscription_"):
            try:
                days = int(payload.split("_")[1])
            except Exception:
                days = 30

        now = datetime.now()
        await db.grant_access(user_id, timedelta(days=days), now)

        await db.record_payment(
            user_id=user_id,
            telegram_payment_charge_id=payment.telegram_payment_charge_id,
            provider_payment_charge_id=payment.provider_payment_charge_id,
            amount=payment.total_amount
        )
        await message.answer(t("thanks", lang=lang, days=days))


@dp.message(lambda m: m.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ" and m.from_user.id == 6660631433)
async def fake_buy_subscription(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è (—Ç–µ—Å—Ç)", callback_data="fake_sub_7")],
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏ (—Ç–µ—Å—Ç)", callback_data="fake_sub_14")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü (—Ç–µ—Å—Ç)", callback_data="fake_sub_30")],
    ])
    await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞):", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith('fake_sub_'))
async def process_fake_subscription(callback_query: types.CallbackQuery):
    days = int(callback_query.data.split('_')[2])
    now = datetime.now()
    await db.grant_access(callback_query.from_user.id, timedelta(days=days), now)
    await callback_query.answer()
    await callback_query.message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ (–±–µ–∑ –æ–ø–ª–∞—Ç—ã).")


@dp.message(lambda m: m.text in ["üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", "üìÖ My subscription"])
async def my_subscription(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    sub_end = await db.get_subscription(user_id)
    if sub_end and sub_end > datetime.utcnow():
        formatted_date = sub_end.strftime("%d %B %Y %H:%M")
        await message.answer(t("my_sub_active", lang=lang, date=formatted_date))
    else:
        await message.answer(t("my_sub_none", lang=lang))


@dp.message(lambda m: m.text in ["üéì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üéì Instruction"])
async def instruction(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    is_admin = user and user['is_admin']
    subscription = user and user['subscription']
    now = datetime.utcnow()

    access_block = t("access_block", lang=lang) if (is_admin or (subscription and subscription > now)) else ""
    one_time_block = t("one_time_block", lang=lang) if not user['used_one_time_access'] else ""
    admin_block = t("admin_block", lang=lang) if is_admin else ""

    await message.answer(
        t("instruction", lang=lang, access_block=access_block, one_time_block=one_time_block, admin_block=admin_block),
        parse_mode="HTML"
    )


@dp.message(Command("users"))
async def users_stats(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"

    if not user or not user['is_admin']:
        await message.answer(t("admin_only", lang=lang))
        return

    total_users = await db.get_user_count()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫" if lang == "ru" else "üìä Active subscriptions", callback_data="stats:subs")]
    ])

    await message.answer(t("users_stats", lang=lang, total=total_users), reply_markup=kb)

@dp.callback_query(lambda c: c.data == "stats:subs")
async def show_active_subs(callback: types.CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    lang = user["language_code"] if user else "ru"
    active_subs = await db.get_active_subscription_count()
    await callback.message.answer(t("active_subs", lang=lang, active=active_subs))
    await callback.answer()


class RefundState(StatesGroup):
    waiting_for_payment_id = State()

@dp.message(lambda m: m.text in ["üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "üí∏ Refund"])
async def refund_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"

    if not user['is_admin']:
        await message.answer(t("refund_admin_only", lang=lang))
        return
    await message.answer(t("refund_enter_id", lang=lang))
    await state.set_state(RefundState.waiting_for_payment_id)

@dp.message(RefundState.waiting_for_payment_id)
async def refund_payment(message: types.Message, state: FSMContext):
    charge_id = message.text.strip()
    user = await db.get_user(message.from_user.id)
    lang = user["language_code"] if user else "ru"

    async with db.pool.acquire() as conn:
        payment = await conn.fetchrow("SELECT * FROM payments WHERE telegram_payment_charge_id = $1", charge_id)

    if not payment:
        await message.answer(t("refund_not_found", lang=lang))
        await state.clear()
        return

    try:
        await bot.refund_star_payment(
            user_id=payment['user_id'],
            telegram_payment_charge_id=charge_id
        )
        await message.answer(t("refund_success", lang=lang))
        await state.clear()
    except Exception as e:
        await message.answer(t("refund_error", lang=lang, e=e))
        await state.clear()


@dp.message(Command("one-time-access"))
async def one_time_access(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    has_used = await db.has_used_one_time_access(user_id)

    if has_used:
        await message.answer(t("one_time_used", lang=lang))
        return

    await db.set_one_time_access_used(user_id)
    now = datetime.now()
    await db.grant_access(user_id, timedelta(minutes=1), now)
    await message.answer(t("one_time_success", lang=lang))


def generate_ref_code(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choices(chars, k=length))

@dp.message(Command("ref"))
async def show_ref_info(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start" if lang == "ru" else "Please use /start first")
        return

    ref_code = user.get("ref_code")
    if not ref_code:
        ref_code = generate_ref_code()
        await db.set_ref_code(user_id, ref_code)

    points = user.get("ref_points", 0)
    text = t("ref_code", lang=lang, ref_code=ref_code, points=points)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 10 –±–∞–ª–ª–æ–≤" if lang == "ru" else "Activate subscription for 10 points", callback_data="ref:activate")]
    ])
    await message.answer(text, reply_markup=kb)

@dp.message(Command("activate_ref"))
async def activate_ref(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start" if lang == "ru" else "Please use /start first")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(t("ref_usage", lang=lang))
        return

    ref_code = parts[1]
    if user.get("used_ref_code"):
        await message.answer(t("ref_already_used", lang=lang))
        return
    if ref_code == user.get("ref_code"):
        await message.answer(t("ref_own", lang=lang))
        return

    ref_owner = await db.get_user_by_ref_code(ref_code)
    if not ref_owner:
        await message.answer(t("ref_not_found", lang=lang))
        return

    await db.set_used_ref_code(user_id, ref_code)
    await db.add_ref_point(ref_owner["user_id"])
    await message.answer(t("ref_activated", lang=lang))

@dp.callback_query(lambda c: c.data == "ref:activate")
async def activate_ref_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    points = user.get("ref_points", 0)
    if points < 10:
        await callback.answer(t("not_enough_points", lang=lang), show_alert=True)
        return
    now = datetime.now()
    await db.grant_access(user_id, timedelta(days=1), now)
    await db.remove_ref_points(user_id, 10)
    await callback.message.answer(t("sub_activated", lang=lang))
    await callback.answer()


@dp.message(Command("stars"))
async def show_stars(message: types.Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    lang = user["language_code"] if user else "ru"
    stars = user.get("stars", 0)
    await message.answer(f"‚≠êÔ∏è –£ –≤–∞—Å {stars} –∑–≤—ë–∑–¥." if lang == "ru" else f"‚≠êÔ∏è You have {stars} stars.")


async def remove_expired_subscriptions():
    while True:
        now = datetime.now()
        async with db.pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET subscription = NULL WHERE subscription IS NOT NULL AND subscription < $1",
                now
            )
        await asyncio.sleep(5 * 60) # –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ –±–æ–ª—å—à–µ —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print(f"Expired subscriptions removed at {now.strftime('%Y-%m-%d %H:%M:%S')}")

async def main():
    await db.connect()
    asyncio.create_task(remove_expired_subscriptions())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())